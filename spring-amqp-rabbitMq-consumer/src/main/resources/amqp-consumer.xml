<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- RabbitMQ 连接工厂 -->
    <rabbit:connection-factory id="connectionFactory" host="${rabbitmq.host}" port="${rabbitmq.port}" username="${rabbitmq.username}" password="${rabbitmq.password}" />

    <!-- 该元素回创建一个 RabbitMQ 管理组件，用于自动创建以下元素所声明的 queue、exchange、binding -->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- **********RabbitMQ 管理主键创建 start********* -->
    <!-- 声明队列 -->
    <!--<queue name="spittle.alert.queue.1" />

    <queue name="spittle.alert.queue.2" />

    <queue name="spittle.alert.queue.3" />-->

    <!-- fanout 类型的exchange，不管消息的routing key 和参数表的头信息/值是什么，消息将会路由到所有队列上 -->
    <!--<fanout-exchange name="spittle.fanout" >
        <bindings>
            <binding queue="spittle.alert.queue.1" />

            <binding queue="spittle.alert.queue.2" />

            <binding queue="spittle.alert.queue.3" />
        </bindings>
    </fanout-exchange>-->
    <!-- **********RabbitMQ 管理主键创建 end********* -->

    <!-- 使用这种处理方式非异步，使用下面的消息驱动 POJO 的方式来处理消息
    <template id="rabbitTemplate" connection-factory="connectionFactory"
              exchange="spittle.alert.exchange"
              routing-key="spittle.alerts"
              queue="spittle.alert.queue"/>-->

    <!-- 使用消息驱动 POJO 的方式处理消息 -->
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener ref="alertHandler" method="sendSpitterAlert" queue-names="spitter.alert.queue" />
    </rabbit:listener-container>
</beans>
